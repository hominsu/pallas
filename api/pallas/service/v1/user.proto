syntax = "proto3";

package pallas.service.v1;

import "google/api/annotations.proto";
import "google/gnostic/openapiv3/annotations.proto";
import "google/protobuf/empty.proto";
import "v1/base.proto";
import "validate/validate.proto";

option go_package = "github.com/hominsu/pallas/api/pallas/service/v1;v1";

service UserService {
  rpc Signup (SignupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/signup",
      body: "*",
    };

    option (openapi.v3.operation) = {
      description: "signup";
    };
  };

  rpc SigninS (SigninSRequest) returns (SigninSReply) {
    option (google.api.http) = {
      get: "/v1/signin/s",
    };

    option (openapi.v3.operation) = {
      description: "request salt by identify(email)";
    };
  };

  rpc SigninA (SigninARequest) returns (SigninAReply) {
    option (google.api.http) = {
      post: "/v1/signin/a",
      body: "*",
    };

    option (openapi.v3.operation) = {
      description: "send A to server and get B";
    };
  };

  rpc SigninM (SigninMRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/signin/m",
      body: "*",
    };

    option (openapi.v3.operation) = {
      description: "send M1 to server";
    };
  };

  rpc SignOut (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/sign-out",
    };

    option (openapi.v3.operation) = {
      description: "sign-out";
    };
  };

  rpc GetUser (GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{id}",
    };
  };

  rpc UpdateUser (UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1/users/{user.id}",
      body: "*",
    };
  };

  rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{id}",
    };
  };
}

message SignupRequest {
  string email = 1 [(validate.rules).string = {ignore_empty: true, email: true}];
  bytes salt = 2;
  bytes verifier = 3;
}

message SigninSRequest {
  string email = 1 [(validate.rules).string = {ignore_empty: true, email: true}];
}

message SigninSReply {
  bytes salt = 1;
}

message SigninARequest {
  string email = 1 [(validate.rules).string = {ignore_empty: true, email: true}];
  bytes ephemeral_a = 2;
}

message SigninAReply {
  bytes ephemeral_b = 1;
}

message SigninMRequest {
  string email = 1 [(validate.rules).string = {ignore_empty: true, email: true}];
  bytes m1 = 2;
}

message GetUserRequest {
  int64 id = 1;
  View view = 2;

  enum View {
    VIEW_UNSPECIFIED = 0;
    BASIC = 1;
    WITH_EDGE_IDS = 2;
  }
}

message UpdateUserRequest {
  User user = 1;
}

message DeleteUserRequest {
  int64 id = 1;
}